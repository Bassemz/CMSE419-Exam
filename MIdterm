//Declare and create obj: 
Class obj = new Class();  //if app halts, move these statements to top of class
//Declare and create arr: 
Class[] name  =new Class[size]; //arr = {…} //arr.length;
//If Alternative: 
var = (bool expression) ? trueChoise : falseChoise;
Switch(expression){
Case value1: ……. Break;
Case value2: ……. Break;
Case value3: ……. Break;
Default: ……. Break; }
For (int i=0; i<exp; i++){……….}
//declaring a function
modifier returnValueType methodName(list of parameters) { 
			// Method body; 
}
String1.length();
String1.equals(string2) //for comparison
String1.toUpperCase() / toLowerCase() 
String1.trim() //removes leading and trailing spaces
ArrayList<ClassType(i.eString/Integer)> list = new ArrayList<ClassType>();
ArrayList methods:
add(value)
add(index, value)
clear()
indexOf(value)
get(index)
remove(index)
set(index, value)
size() //instead of .length
toString()


//interacting with UI components
//whenever you want to get or set something for a UI component, first use findViewbyId() 
//to get the view object of the component then use get and set methods (i.e. setChecked/setText/getText..etc)

//Multiple button listener: 
	add “ implements View.OnClickListener” to the head of the class
	set your buttons all to the same function:
        bt_1.setOnClickListener(this);
        bt_2.setOnClickListener(this);
        bt_3.setOnClickListener(this);
        bt_4.setOnClickListener(this);
	redefine on click function outside the onCreate function:
public void onClick(View buttons) {
//determine which button/Radio buttons is clicked and what to do in each case
        switch(buttons.getId()){

            case R.id.button: do something;

                break;
            case R.id.button2:do something;

                break;
            case R.id.button3:do something;

                break;
            case R.id.button4:do something;

                break;
        }
    }
//Defining and using ArrayAdapter with listView: 
	ArrayAdapter AdapterName = new ArrayAdapter(this, android.R.layout.simple_list_item_1, ArrayName); 
	//Get reference of listview: 
    ListView viewName = (ListView)findViewById(R.id.listView1/spinner/..etc); 
	//Pass adapter to listview: 
    viewName.setAdapter(AdapterName);
=> 	//Same thing for gridView just replace word “listView”
    //when array connected to adapter is changed, notify the adapter to reflect changes on screen
    adapter.notifyDataSetChanged();


//Spinners and Radio Buttons
//Create spinner dropdown menu: 
    //After putting widget in UI, create string array with the options in java file
    String[] options = {“choose” , “option1”, “option2”,..};
    //In onCreate function:
        spinner = findViewById(R.id.spinner);
        spinnerAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_dropdown_item, spinner_options);
        spinner.setAdapter(spinnerAdapter);

        sp_selection.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                    @Override
                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                        switch(position){
                            case 1:
                                do something
                                break;
                            case 2:
                                do something
                                break;
                            case 3:
                                do something
                                break;
                        }
                    }
                }	
//Create Radio button group:
	Locate radio group component: rg=findViewById(R.id.radioGroup); 
	rg.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int i) { //i is the id of button clicked

                switch(i){
                    case R.id.radioButton7:
                        Toast.makeText(MainActivity.this, "Yes Selected", Toast.LENGTH_SHORT).show();
                        break;
                    case R.id.radioButton8:
                        Toast.makeText(MainActivity.this, "No selected", Toast.LENGTH_SHORT).show();
                        break;
                    case R.id.radioButton9:
                        Toast.makeText(MainActivity.this, "May be selected", Toast.LENGTH_SHORT).show();
                        break;
                }
            }
        });
//To mark a radio button from data saved:
//Example of locating the button then marking it:
    RadioButton rb_department;
	if (foundStudent.getProgram().equals("cmpe")){
	                        rb_department = findViewById(R.id.cmpe_b);
	                    } else if (foundStudent.getProgram().equals("cmse")){
	                        rb_department = findViewById(R.id.cmse_b);
	                    } else if (foundStudent.getProgram().equals("blgm")){
	                        rb_department = findViewById(R.id.blgm_b);
	                    }
	                    //mark it as checked
	                    rb_department.setChecked(true);
//Intents
//Sending activity code:
    Intent intent=new Intent(MainActivity.this, MyNew.class); //defining intent	 			
    //Sending data to next activity using putExtra method				
    intent.putExtra("NAME", name);				
	intent.putExtra("SURNAME", surname);				
	//starting the next activity				
	startActivity(intent);
//receiving activity code:
    Intent intent=getIntent();
//If data passed is a complex type (i.e. array, custom object):
        String name = intent.getStringExtra();
        if(name!=null){
        //Getting the value stored in the name "NAME"
        //do something
        }
//Else:
        arr=(ArrayList<String>) intent.getSerializableExtra("newarray"); // in case of serializable obj
        if (arr!=null){
            //do stuff;
        }
//Get back to previous activity -> inside the bt_back.onClickListener put 
Finish();

//inserting images
// res -> drawable -> put all image  (resource manager) -> drag drop imageView -> select the specific  ->java file
final int resources[]= {R.drawable.imageName, R.drawabl.imageName2};
// for displaying teh image in the image view
iw1.setImageResource(resources[i]^);//^R.drawable.imageName

//removing nav bar
// res -> values -> themes -> themes.xml ->inside <style> replace parent with:
parent="Theme.MaterialComponents.DayNight.NoActionBar"

// Adding nav bar
// res -> values -> themes -> themes.xml -> inside <style> replace parent with:
parent="Theme.MaterialComponents.DayNight.DarkActionBar"


//dynamic component rendering 
// step 1: Have a Container inside the design layout file (xml) and retrieve the view of it before.
// to define any UI component programatically 
Componentclass componentName = new Componentclass(ActivityName.this^); //^this

//helper functions
parentViewName.setGravity(1); //sets gravity  to center
componentName.setEms(5); //sets the width of textview to 5 
componentName.setHint(hint); //sets hint
componentName.setTextSize(30);
// after setting the component, have to insert in a view
parentViewName.addView(componentName); // Add the EditText view to  -- must do 
//delete component from a parent view
ll.removeViews(0, number_courses + 3); // strat index, end index (not included)





// File System (fs)
// Writing to a file (Method 1)
        try {
            FileOutputStream fos=openFileOutput(filename, Context.MODE_PRIVATE^); //^MODE_APPEND for appending new records
            String text=et1.getText().toString()+" "+et2.getText().toString()+" "+et3.getText().toString()+" "; 
            fos.write(text.getBytes());
            fos.close();
        }
        catch (IOException e) {
            e.printStackTrace();
        }    

// Writing to a file (Method 2) ----- BEST
try {
            FileOutputStream fos = openFileOutput(fileName, Context.MODE_PRIVATE);
            OutputStreamWriter osw = new OutputStreamWriter(fos);
            for(int i =0;i<studentArrayList.size();i++){
                osw.write(arr.get(i).toString()+"\n");  //ADD newline at the end!!!!!!!! important ok???
            }
            osw.flush();
            osw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

//Reading from a file (Method 1)
    try {
            String text="";
            FileInputStream fis=openFileInput(filename);
            int size=fis.available();
            byte[] buffer=new byte[size];
            fis.read(buffer);
            fis.close();
            text=new String(buffer);
            contents = new ArrayList<String>(Arrays.asList(text.split(" ")));
            Intent intent = new Intent(MainActivity.this, Main2Activity.class);
            intent.putExtra("array_list", contents);
            startActivity(intent);
        } catch (IOException e) {
            e.printStackTrace();
        }
//Reading from a file (Method 2) ---- BEST
try{
            InputStreamReader isr = new InputStreamReader(openFileInput(fileName));
            BufferedReader reader = new BufferedReader(isr);
            String LineFromFile="";
            while((LineFromFile = reader.readLine())!= null){
                StringTokenizer tokenizer = new StringTokenizer(LineFromFile, " ");
                String name = tokenizer.nextToken();
                String surname = tokenizer.nextToken();
                String studentNo = tokenizer.nextToken();
                String program = tokenizer.nextToken();
                Student student = new Student(Integer.parseInt(studentNo), name, surname, program);
                studentArrayList.add(student);


            }
            reader.close();
        } catch (IOException e) {
            Toast.makeText(this, "Input output filesystem exception", Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }


// Database
// 1-Add the MyDB.java file to the project and modify it according to DB design 
// 2-Usage: 
//initialize db instance in the top of every file you will read/write to db
MyDB DBHandler = new MyDB(this);
// a- Reading from Database

        Cursor DBCursor = DBHandler.getStudents();
        
        while(DBCursor.moveToNext()){
                studentsArrayList.add(DBCursor.getInt(0)^ + " " +DBCursor.getInt(1) + " " + DBCursor.getInt(2) + " " +DBCursor.getInt(3));
                //^ getInt(index) or getString(index)
        }

// b- Adding to Database:
        DBHandler.AddStu(studentNo, midterm1, midterm2, finalGr);

// c- Deleting from Database:
        DBHandler.deleteStudent(studentNo);

// options menu
// go to themes.xml and remove noActionBar
// res folder -> create new Android Resource Directory -> inside it create new Menu Resource File (xml) or create the resource file directly
// drag and drop menu and menu items to the newly created file and add IDs 
// in mainActivity (under onCreate)
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        //menu construtor

        MenuInflater inflate = getMenuInflater();

        inflate.inflate(R.menu.optionsmenu, menu);

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {

        // Way 1
        if (item.getItemId() == R.id.id_item1){
                Toast.makeText(this, "yo", Toast.LENGTH_SHORT).show();
                return true; 
            } 
        //if-else-if-else
        else return super.onOptionsItemSelected(item);

        // Way 2
        switch (item.getItemId()){

            case R.id.id_item1:
                Toast.makeText(this, "Item 1 Selected About", Toast.LENGTH_SHORT).show();
                return true;
            case R.id.id_item2:

                Toast.makeText(this, "Item 2 selected", Toast.LENGTH_SHORT).show();
                return true;
            case R.id.id_submenu1:
                Toast.makeText(this, "SubMenu", Toast.LENGTH_SHORT).show();
                return true;
            default: return super.onOptionsItemSelected(item);
        }
    }

//pop up menu
// res folder -> create new Android Resource Directory -> inside it create new Menu Resource File (xml)
// drag and drop menu and menu items to the newly created file and add IDs 
// in mainActivity (inside onCreate)
    PopupMenu popup = new PopupMenu(MainActivity.this, componentName); //componentName is the component to which you are creating popup menu
    popup.getMenuInflater().inflate(R.menu.popupmenu, popup.getMenu());

    //listener for popup menu

    popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
        @Override
        public boolean onMenuItemClick(MenuItem menuItem) {

            Toast.makeText(MainActivity.this, "clicked", Toast.LENGTH_SHORT).show();
            return false;
        } 
    });
    popup.show(); // to show the menu

// Examples of pop up menu:
// Putting popup menu when an item is clicked in a ListView

    lv_context_menu.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Toast.makeText(MainActivity.this, "Clicked", Toast.LENGTH_SHORT).show();
                PopupMenu popupMenu = new PopupMenu(MainActivity.this, view);
                popupMenu.getMenuInflater().inflate(R.menu.popup_menu, popupMenu.getMenu());

                popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
                    @Override
                    public boolean onMenuItemClick(MenuItem item) {
                        return false;
                    }
                });

                popupMenu.show();
            }
        });

// Putting a popup when a button is clicked:
    btn_add.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                popupMenu = new PopupMenu(MainActivity.this, btn_add);
                MenuInflater menuInflater3 = popupMenu.getMenuInflater();
                menuInflater3.inflate(R.menu.popupmenu, popupMenu.getMenu());
                popupMenu.show();

                popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
                    @Override
                    public boolean onMenuItemClick(MenuItem item) {
                        switch (item.getItemId()){
                            case R.id.popup1:
                                Toast.makeText(MainActivity.this, "Popup 1", Toast.LENGTH_SHORT).show();
                                return true;
                            case R.id.popup2:
                                Toast.makeText(MainActivity.this, "Popup 2", Toast.LENGTH_SHORT).show();
                                return true;
                            case R.id.popup3:
                                Toast.makeText(MainActivity.this, "Popup 3", Toast.LENGTH_SHORT).show();
                                return true;
                            default:
                                return false;
                        }
                    }
                });

            }
        })

// Context menu
// res folder -> create new Android Resource Directory -> inside it create new Menu Resource File (xml)
// drag and drop menu and menu items to the newly created file and add IDs 
// in the XML of mainactivity add the element to which you want to do context menu
// in mainActivity (under onCreate)

// Initially, Create a ListView and link it with findViewById() function
// Then, inside the onCreate(Bundle savedInstanceState) function, add the following:
    registerForContextMenu(lv)
// Where lv is the ListView linked

// Now you can add the following functions:
public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);

        MenuInflater inflater = getMenuInflater();

        inflater.inflate(R.menu.mymenu, menu);

    }

    @Override
    public boolean onContextItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == R.id.it1){
            Toast.makeText(this, "call", Toast.LENGTH_SHORT).show();
            return true;
        }else if (item.getItemId() == R.id.it2)
        {Toast.makeText(this, "text", Toast.LENGTH_SHORT).show();
                   return true;}
        return super.onContextItemSelected(item);
    }


// fragments
// in main xml, remove contraint layout and add a *orientation="vertical"* linear layout
//tab layout should be at the top of the screen like an action bar so action bar should be removed
// add tablayout from "Containers" and inside it add as many TabItems as the fragments
// add a framelayout under tablayout
// create a separate activity for each fragment and add the following code in each fragment's java file 
public class firstFragment extends Fragment { //extends Fragment
    public firstFragment() { //create it by right clicking -> generate
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //setContentView(R.layout.activity_first_fragment);
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        //return super.onCreateView(inflater, container, savedInstanceState);

        return inflater.inflate(R.layout.activity_first_fragment* , container, false); *//name of the xml file of the fragment
    }
}

//setting default fragment 
//in main activity:
Fragment fragments = null;
fragments = new firstFragment();
FragmentManager fManager = getSupportFragmentManager();

// to control "transactions" which are the activites in the fragments
FragmentTransaction fTransaction = fManager.beginTransaction();

// replacing the framelayout view with the fragment object we created in switch()
fTransaction.replace(R.id.fr, fragments);
//remove fragment after usage
fTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);
//close
fTransaction.commit();
//listener for tablayout
tl_tablayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
@Override
public void onTabSelected(TabLayout.Tab tab) {
    int pos = tab.getPosition();
    switch(pos){
        case 0:
            fragments = new firstFragment(); //fragment name
            break;//constructor of first fragment
        case 1:
            fragments = new secondFragment();
            break;

    }


    // a manager for controlling fragmant's content
    FragmentManager fManager = getSupportFragmentManager();

    // to control "transactions" which are the activites in the fragments
    FragmentTransaction fTransaction = fManager.beginTransaction();

    // replacing the framelayout(fr) view with the fragment object we created in switch()
    fTransaction.replace(R.id.fr, fragments);
    //remove fragment after usage
    fTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);
    //close
    fTransaction.commit();
}

@Override
public void onTabUnselected(TabLayout.Tab tab) {

}

@Override
public void onTabReselected(TabLayout.Tab tab) {

}
});
// adding tab to tablayout
Tablayout.Tab firstTab = tl_tablayout.newTab(); //assuming you defined a tablayout called tl_tablayout 
firstTab.setText("Tab name goes here");
tl.tablayout.addTab(firstTab);

